

let pHtmlMsg;
let serialOptions = { baudRate: 115200 };
let serial;

let currentColor;
let prevX, prevY;
let drawing = false;

function setup() {
  createCanvas(640, 480);

  // Setup Web Serial using serial.js
  serial = new Serial();
  serial.on(SerialEvents.CONNECTION_OPENED, onSerialConnectionOpened);
  serial.on(SerialEvents.CONNECTION_CLOSED, onSerialConnectionClosed);
  serial.on(SerialEvents.DATA_RECEIVED, onSerialDataReceived);
  serial.on(SerialEvents.ERROR_OCCURRED, onSerialErrorOccurred);

  // If we have previously approved ports, attempt to connect with them
  serial.autoConnectAndOpenPreviouslyApprovedPort(serialOptions);

  // Add in a lil <p> element to provide messages. This is optional
  pHtmlMsg = createP("Click anywhere on this page to open the serial connection dialog");
  pHtmlMsg.style('color', 'deeppink');

  currentColor = color(0); // Initial color (black)
  prevX = width / 2;
  prevY = height / 2;
}

function draw() {
  background(255); // White background

  // Draw line using joystick position
  stroke(currentColor);
  strokeWeight(4);
  if (drawing) {
    line(prevX, prevY, mouseX, mouseY);
  }

  // Update the previous position with the current position
  prevX = mouseX;
  prevY = mouseY;
}

/**
 * Callback function by serial.js when there is an error on web serial
 * 
 * @param {} eventSender 
 */
function onSerialErrorOccurred(eventSender, error) {
  console.log("onSerialErrorOccurred", error);
  pHtmlMsg.html(error);
}

/**
 * Callback function by serial.js when web serial connection is opened
 * 
 * @param {} eventSender 
 */
function onSerialConnectionOpened(eventSender) {
  console.log("onSerialConnectionOpened");
  pHtmlMsg.html("Serial connection opened successfully");
}

/**
 * Callback function by serial.js when web serial connection is closed
 * 
 * @param {} eventSender 
 */
function onSerialConnectionClosed(eventSender) {
  console.log("onSerialConnectionClosed");
  pHtmlMsg.html("onSerialConnectionClosed");
}

/**
 * Callback function serial.js when new web serial data is received
 * 
 * @param {*} eventSender 
 * @param {String} newData new data received over serial
 */
function onSerialDataReceived(eventSender, newData) {
  console.log("onSerialDataReceived", newData);
  pHtmlMsg.html("onSerialDataReceived: " + newData);

  // Split the data into X and Y positions
  let values = newData.split(',');
  // Convert values to integers
  let joystickX = parseInt(values[0]);
  let joystickY = parseInt(values[1]);
  let buttonState = parseInt(values[2]);
  
  // Map joystick X and Y to canvas width and height
  mouseX = map(joystickX, 0, 1023, 0, width);
  mouseY = map(joystickY, 0, 1023, 0, height);

  // Change drawing color when button is pressed
  if (buttonState === 1) {
    currentColor = color(random(255), random(255), random(255)); // Random color
    drawing = true;
  } else {
    drawing = false;
  }
}

/**
 * Called automatically by the browser through p5.js when mouse clicked
 */
function mouseClicked() {
  if (!serial.isOpen()) {
    serial.connectAndOpen(null, serialOptions);
  }
}
